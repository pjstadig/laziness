#-*- mode: org -*-
#+STARTUP: hidestars showall
* Laziness: The Good, The Bad, and the Ugly
  1. Introduction
     1. About Me
        1. Employed by Sonian, one of the first companies to use Clojure
           commercially.  Been there writing Clojure for 2 years.  We develop a
           data archiving product.
        2. My initial foray into Clojure was to get Clojure to work with
           Terracotta.  Met Alex then and submitted a couple of bug fixes to
           Terracotta.  I was able to use the JSwat debugger to debug clojure
           and java code at the same time.  It was pretty wild!
        3. Contributor to Clojure.  Submitted a patch to fix a bug in Clojure
           where multi-methods were holding the head of their arguments.  I came
           up with the idea for remove.  Every time Phil uses remove he thinks,
           "Thanks, Paul!"  I pushed to get a 1.2.1 released with a fix for the
           Keyword intern bug.  I discovered a bug the way Clojure's (1.3)
           persistent collections hash keys.
        4. Thanks to Lauren!
     2. The promise of laziness (promise.clj)
        1. Infinite sequences.  It is sometimes more natural (or more useful) to
           express a solution using infinite sequences.  More declarative
        2. Treat seqs as control structures.  A lazy seq is a loop.
        3. Efficient. You only do the amount of work that is needed, and no
           more.  Use only the amount of memory that is needed, and no more.
           
           EXAMPLE: several nested calls to map process a single item through
           each mapped function with each force, as opposed to fully processing
           the whole seq with the inner layers on the first force.

           SLIDE
  2. Evaluation (evaluation.clj)
     1. Order of evaluation in Clojure
        1. function first
        2. then each argument
        3. then calls the function with the arguments.
     2. Lazy evaluation:
        1. evaluates the function
        2. then calls the function with the unevaluated arguments.
     3. Macros
        1. receive (at compile time) the unevaluated arguments
        2. returns code that will be compiled.
  3. What is a seq? (seq.clj)
     1. A very specific thing. An object that implements ISeq
     2. first: the first element in the sequence
     3. rest: a (possibly empty, but never nil) sequence of the rest of the elements
  4. How lazy sequences work
     1. It wasn't always this way, it used to be more traditionally Lispy,
        but to have fully lazy sequences rest needed to not realize any part
        of the sequence.  rest needed to realize the first item in a sequence
        to see whether it should return nil.
     2. As a result, to do nil punning in Clojure you need to use first and
        next, not first and rest.
     3. first, rest, seq, next
     4. The compiler does locals clearing
        1. RT.count
        2. Util.ret1
        3. This has caused problems for debuggers
  5. Chunked sequences (chunking.clj)
     1. Can be used to realize in chunks to exploit efficiencies.
     2. range is chunked when seq'ed
     3. PersistentVectors are chunked when seq'ed
  6. Tour de core: lazy-seq and its ilk (core.clj)
  7. Pitfalls
     1. Escaping context (core.clj)
        1. Errors happening far from where they actually occurred.
     2. Heap overflow (case_study2.clj)
        1. Holding onto the head
        2. Chunking
     3. Stack overflow (case_study3.clj)
     4. REPL problems (repl_problems.clj)
        1. *print-length*
        2. *print-level*
  8. See Also: delay, future, promise
     1. delay allows you to delay a computation until you force it with a deref.
